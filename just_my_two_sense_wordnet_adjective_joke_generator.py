# -*- coding: utf-8 -*-
"""just my two sense - wordNet adjective joke generator

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o11K0kjqCUwjWVKUbAFCWyXALn4bA8ab
"""

# Upload the database as a .txt file called "adj list.txt".
from google.colab import files
uploaded = files.upload()

#1) JOKE GENERATOR: prints all the jokes at once

raw_file = open('adj list.txt')     #open database from uploaded text file

ENTRY = []        #create a list for each sense, each definition, and an example sentence
DEFINITION = []
EXAMPLE = []


for line in raw_file:     #search through each line in the text file
  entry = line.split(',')
  example = line.split(';')
  line=line.strip()
  if line.startswith ('[{'):
    for n in (1,2,3,4,5,6,7,8,9,10):    #search for entries with multiple senses, e.g. "ACTIVE1"
      if entry[0].find(str(n)) != -1:
        start_entry = entry[0].find ('{')
        end_entry = entry[0].find(str(n))
        if len(str(n)) == 1 and line.find('"') != -1 and example[1].startswith(' "'):   #weed out entries without definitions, e.g. starting with "
          word = entry[0][start_entry+4:end_entry+1]
          ENTRY.append(word)
          if example[0].find('((') == -1:
            start_example = example[0].find('(')
            definition =  example[0][start_example+1:]
            DEFINITION.append(definition)         #add definition to list
            if example[1].find('")') != -1 or example[1].find('"-') != -1:    #find correct example based on puncutation in sentence, 3 types
              if example[1].find('")') != -1:
                end_example = example[1].find('")')
                sample =  example[1][:end_example+1]
                EXAMPLE.append(sample)            #add example to list if it ends with ')'
              if example[1].find('"-') != -1:
                end_example = example[1].find('"-')
                sample =  example[1][:end_example+1]
                EXAMPLE.append(sample)            #add sample to list if it ends with '-'
            else:
              EXAMPLE.append(example[1])          #add sample to list for all other cases
          else:
            start_example = example[0].find(')')
            definition =  example[0][start_example+1:]
            DEFINITION.append(definition)
            if example[1].find('")') != -1:
              end_example = example[1].find('")')
              sample =  example[1][:end_example+1]
              EXAMPLE.append(sample)
            else:
              EXAMPLE.append(example[1])
        if len(str(n)) == 2 and line.find('"') != -1 and example[1].startswith(' "'): #repeat above for senses ending in '10', since we have to calculate the end of the string from a different position as a two-digit number
          word = entry[0][start_entry+4:end_entry+2]
          definition =  example[0][start_example+1:]
          DEFINITION.append(definition)
          if example[1].find('")') != -1:
              print (example[1].find('")'))
              end_example = example[1].find('")')
              sample =  example[1][:end_example+1]
              EXAMPLE.append(sample)
          else:
              EXAMPLE.append(example[1])

for count in range(len(ENTRY)-1):    #This prints all the jokes. "count" gets the index of all entries, derived from the length of the list ENTRY
  if str(ENTRY[count+1][0:len(ENTRY[count+1])-1]) == str(ENTRY[count][0:len(ENTRY[count])-1]):      #find two senses next to each other with the same word
    bold = EXAMPLE[count].find(str(ENTRY[count][0:len(ENTRY[count])-1]).lower())
    print ("BILL: " + "Check it out! The sign says" + EXAMPLE[count][0:bold] + '\033[3m' + EXAMPLE[count][bold:bold+(len(ENTRY[count]))] + '\033[0m' + EXAMPLE[count][bold+(len(ENTRY[count])):] + "!")
    print ("TED: No wayyy! I didn't know that they could be " + DEFINITION [count+1] + "!")
    print (ENTRY[count] + ": " + DEFINITION[count] + ' / ' + ENTRY[count+1] + ": " + DEFINITION[count+1])
    print ('')

#2) JOKE GENERATOR: generates one random joke

import random   #import package "random" we'll use for the random number generator

raw_file = open('adj list.txt')     #open database saved as text file

ENTRY = []        #create a list for each sense, each definition, and an example sentence
DEFINITION = []
EXAMPLE = []

# Part 1: this creates the database of entries with multiple senses
for line in raw_file:     #search through each line in the text file
  entry = line.split(',')
  example = line.split(';')
  line=line.strip()
  if line.startswith ('[{'):
    for n in (1,2,3,4,5,6,7,8,9,10):    #search for entries with multiple senses, e.g. "ACTIVE1"
      if entry[0].find(str(n)) != -1:
        start_entry = entry[0].find ('{')
        end_entry = entry[0].find(str(n))
        if len(str(n)) == 1 and line.find('"') != -1 and example[1].startswith(' "'):   #weed out entries without definitions starting with "
          word = entry[0][start_entry+4:end_entry+1]
          ENTRY.append(word)
          if example[0].find('((') == -1:
            start_example = example[0].find('(')
            definition =  example[0][start_example+1:]
            DEFINITION.append(definition)         #add definition to list
            if example[1].find('")') != -1 or example[1].find('"-') != -1:    #find correct example based on puncutation in sentence
              if example[1].find('")') != -1:
                end_example = example[1].find('")')
                sample =  example[1][:end_example+1]
                EXAMPLE.append(sample)            #add example to list if it ends with ')'
              if example[1].find('"-') != -1:
                end_example = example[1].find('"-')
                sample =  example[1][:end_example+1]
                EXAMPLE.append(sample)            #add sample to list if it ends with '-'
            else:
              EXAMPLE.append(example[1])          #add sample to list for all other cases
          else:
            start_example = example[0].find(')')
            definition =  example[0][start_example+1:]
            DEFINITION.append(definition)
            if example[1].find('")') != -1:
              end_example = example[1].find('")')
              sample =  example[1][:end_example+1]
              EXAMPLE.append(sample)
            else:
              EXAMPLE.append(example[1])
        if len(str(n)) == 2 and line.find('"') != -1 and example[1].startswith(' "'): #repeat above for senses ending in '10', since we have to calculate the end of the string from a different position as a two-digit number
          word = entry[0][start_entry+4:end_entry+2]
          definition =  example[0][start_example+1:]
          DEFINITION.append(definition)
          if example[1].find('")') != -1:
              print (example[1].find('")'))
              end_example = example[1].find('")')
              sample =  example[1][:end_example+1]
              EXAMPLE.append(sample)
          else:
              EXAMPLE.append(example[1])

# Part 2: this searches through the database for two adjacent senses of the same word
stop = 0              #this variable stops the program if two adjacent senses with the same word in their entries are found
while stop == 0:
  count = random.randrange(0, (len(ENTRY))-1)
  if str(ENTRY[count+1][0:len(ENTRY[count+1])-1]) == str(ENTRY[count][0:len(ENTRY[count])-1]):        #find two senses next to each other with the same word
    bold = EXAMPLE[count].find(str(ENTRY[count][0:len(ENTRY[count])-1]).lower())
    print ("BILL: " + "Check it out! The sign says" + EXAMPLE[count][0:bold] + '\033[3m' + EXAMPLE[count][bold:bold+(len(ENTRY[count]))] + '\033[0m' + EXAMPLE[count][bold+(len(ENTRY[count])):] + "!")
    print ("TED: No wayyy! I didn't know it could be " + DEFINITION [count+1] + "!")
    print ('')
    print (ENTRY[count] + ": " + DEFINITION[count] + ' / ' + ENTRY[count+1] + ": " + DEFINITION[count+1])
    stop = 1
  else:
      continue

#3) JOKE EVALUATOR: labels each joke as "bad" or "good" depending on whether the senses contain at least 1 identical content word

raw_file = open('adj list.txt')     #open database from uploaded text file

ENTRY = []        #create a list for each sense, each definition, and an example sentence
DEFINITION = []
EXAMPLE = []


for line in raw_file:     #search through each line in the text file
  entry = line.split(',')
  example = line.split(';')
  line=line.strip()
  if line.startswith ('[{'):
    for n in (1,2,3,4,5,6,7,8,9,10):    #search for entries with multiple senses, e.g. "ACTIVE1"
      if entry[0].find(str(n)) != -1:
        start_entry = entry[0].find ('{')
        end_entry = entry[0].find(str(n))
        if len(str(n)) == 1 and line.find('"') != -1 and example[1].startswith(' "'):   #weed out entries without definitions, e.g. starting with "
          word = entry[0][start_entry+4:end_entry+1]
          ENTRY.append(word)
          if example[0].find('((') == -1:
            start_example = example[0].find('(')
            definition =  example[0][start_example+1:]
            DEFINITION.append(definition)         #add definition to list
            if example[1].find('")') != -1 or example[1].find('"-') != -1:    #find correct example based on puncutation in sentence, 3 types
              if example[1].find('")') != -1:
                end_example = example[1].find('")')
                sample =  example[1][:end_example+1]
                EXAMPLE.append(sample)            #add example to list if it ends with ')'
              if example[1].find('"-') != -1:
                end_example = example[1].find('"-')
                sample =  example[1][:end_example+1]
                EXAMPLE.append(sample)            #add sample to list if it ends with '-'
            else:
              EXAMPLE.append(example[1])          #add sample to list for all other cases
          else:
            start_example = example[0].find(')')
            definition =  example[0][start_example+1:]
            DEFINITION.append(definition)
            if example[1].find('")') != -1:
              end_example = example[1].find('")')
              sample =  example[1][:end_example+1]
              EXAMPLE.append(sample)
            else:
              EXAMPLE.append(example[1])
        if len(str(n)) == 2 and line.find('"') != -1 and example[1].startswith(' "'): #repeat above for senses ending in '10', since we have to calculate the end of the string from a different position as a two-digit number
          word = entry[0][start_entry+4:end_entry+2]
          definition =  example[0][start_example+1:]
          DEFINITION.append(definition)
          if example[1].find('")') != -1:
              print (example[1].find('")'))
              end_example = example[1].find('")')
              sample =  example[1][:end_example+1]
              EXAMPLE.append(sample)
          else:
              EXAMPLE.append(example[1])
FILTER=[]
stoplist = ('in','of','on','to','the','for', 'by', 'with','the','a', 'an','and','or', 'not')
for count in range(len(ENTRY)-1):    #This prints all the jokes. "count" gets the index of all entries, derived from the length of the list ENTRY
  if str(ENTRY[count+1][0:len(ENTRY[count+1])-1]) == str(ENTRY[count][0:len(ENTRY[count])-1]):      #find two senses next to each other with the same word
    glossword1 = DEFINITION[count].split() #turn each gloss into list
    glossword2 = DEFINITION[count+1].split() #turn each gloss into list
    bothmin = (min(len(glossword1),len(glossword2))) #find shortest list length for index
    min_id = min(glossword1, glossword2) #identify shortest gloss
    bothmax = (max(len(glossword1),len(glossword2))) #find longest list length for index
    max_id = max(glossword1, glossword2) #identify longest gloss
    for n in range(bothmin):
          if min_id[n] in max_id and min_id[n] not in stoplist: #if one word in the shorter gloss is in the longer gloss
            FILTER.append(ENTRY[count])
    if ENTRY[count] in FILTER:
      print ('***BAD JOKE')
      bold = EXAMPLE[count].find(str(ENTRY[count][0:len(ENTRY[count])-1]).lower())
      print ("BILL: " + "Check it out! The sign says" + EXAMPLE[count][0:bold] + '\033[3m' + EXAMPLE[count][bold:bold+(len(ENTRY[count]))] + '\033[0m' + EXAMPLE[count][bold+(len(ENTRY[count])):] + "!")
      print ("TED: No wayyy! I didn't know that they could be " + DEFINITION [count+1] + "!")
      print (ENTRY[count] + ": " + DEFINITION[count] + ' / ' + ENTRY[count+1] + ": " + DEFINITION[count+1])
      print ('')
    else:
      print ('GOOD JOKE')
      bold = EXAMPLE[count].find(str(ENTRY[count][0:len(ENTRY[count])-1]).lower())
      print ("BILL: " + "Check it out! The sign says" + EXAMPLE[count][0:bold] + '\033[3m' + EXAMPLE[count][bold:bold+(len(ENTRY[count]))] + '\033[0m' + EXAMPLE[count][bold+(len(ENTRY[count])):] + "!")
      print ("TED: No wayyy! I didn't know that they could be " + DEFINITION [count+1] + "!")
      print (ENTRY[count] + ": " + DEFINITION[count] + ' / ' + ENTRY[count+1] + ": " + DEFINITION[count+1])
      print ('')